# coding: utf-8

"""
    Fleet v2 HTTP API

    HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.

    The version of the OpenAPI document: 2.7.0
    Contact: jiri.strouhal@bringauto.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, field_validator
from typing import Optional
from typing_extensions import Annotated
from fleet_http_client_python.models.available_devices import AvailableDevices

from fleet_http_client_python.api_client import ApiClient, RequestSerialized
from fleet_http_client_python.api_response import ApiResponse
from fleet_http_client_python.rest import RESTResponseType


class ModuleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def available_devices(
        self,
        company_name: Annotated[str, Field(strict=True, description="Name of the company, following a pattern ^[0-9a-z_]+$.")],
        car_name: Annotated[str, Field(strict=True, description="Name of the Car, following a pattern ^[0-9a-z_]+$.")],
        module_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="An Id of module, an unsigned integer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AvailableDevices:
        """available_devices

        Return device Ids for all devices available for contained in the specified car.<br> For a single car module, the device Ids are returned as an object containing module Id and the list of device Ids. <br> If a module Id is specified, only a single such object is returned. <br> Otherwise, a list of such objects is returned, one for each module contained in the car. <br>

        :param company_name: Name of the company, following a pattern ^[0-9a-z_]+$. (required)
        :type company_name: str
        :param car_name: Name of the Car, following a pattern ^[0-9a-z_]+$. (required)
        :type car_name: str
        :param module_id: An Id of module, an unsigned integer.
        :type module_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._available_devices_serialize(
            company_name=company_name,
            car_name=car_name,
            module_id=module_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableDevices",
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def available_devices_with_http_info(
        self,
        company_name: Annotated[str, Field(strict=True, description="Name of the company, following a pattern ^[0-9a-z_]+$.")],
        car_name: Annotated[str, Field(strict=True, description="Name of the Car, following a pattern ^[0-9a-z_]+$.")],
        module_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="An Id of module, an unsigned integer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AvailableDevices]:
        """available_devices

        Return device Ids for all devices available for contained in the specified car.<br> For a single car module, the device Ids are returned as an object containing module Id and the list of device Ids. <br> If a module Id is specified, only a single such object is returned. <br> Otherwise, a list of such objects is returned, one for each module contained in the car. <br>

        :param company_name: Name of the company, following a pattern ^[0-9a-z_]+$. (required)
        :type company_name: str
        :param car_name: Name of the Car, following a pattern ^[0-9a-z_]+$. (required)
        :type car_name: str
        :param module_id: An Id of module, an unsigned integer.
        :type module_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._available_devices_serialize(
            company_name=company_name,
            car_name=car_name,
            module_id=module_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableDevices",
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def available_devices_without_preload_content(
        self,
        company_name: Annotated[str, Field(strict=True, description="Name of the company, following a pattern ^[0-9a-z_]+$.")],
        car_name: Annotated[str, Field(strict=True, description="Name of the Car, following a pattern ^[0-9a-z_]+$.")],
        module_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="An Id of module, an unsigned integer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """available_devices

        Return device Ids for all devices available for contained in the specified car.<br> For a single car module, the device Ids are returned as an object containing module Id and the list of device Ids. <br> If a module Id is specified, only a single such object is returned. <br> Otherwise, a list of such objects is returned, one for each module contained in the car. <br>

        :param company_name: Name of the company, following a pattern ^[0-9a-z_]+$. (required)
        :type company_name: str
        :param car_name: Name of the Car, following a pattern ^[0-9a-z_]+$. (required)
        :type car_name: str
        :param module_id: An Id of module, an unsigned integer.
        :type module_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._available_devices_serialize(
            company_name=company_name,
            car_name=car_name,
            module_id=module_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableDevices",
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _available_devices_serialize(
        self,
        company_name,
        car_name,
        module_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if company_name is not None:
            _path_params['company_name'] = company_name
        if car_name is not None:
            _path_params['car_name'] = car_name
        # process the query parameters
        if module_id is not None:
            
            _query_params.append(('module_id', module_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'AdminAuth', 
            'oAuth2AuthCode'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/available-devices/{company_name}/{car_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


